import numpy as np
import pandas as pd
import ast
movies=pd.read_csv("tmdb_5000_movies.csv")
credits=pd.read_csv("tmdb_5000_credits.csv")
movies = movies.merge(credits,on='title')
movies=movies[['movie_id','title', 'genres', 'overview', 'keywords', 'cast', 'crew']]
movies.dropna(inplace=True)
def convert(obj):
    l=[]
    for i in ast.literal_eval(obj):
        l.append(i['name'])
    return l
movies['genres']=movies['genres'].apply(convert)
movies['keywords']=movies['keywords'].apply(convert)
def getcast(obj):
    l=[]
    counter=0
    for i in ast.literal_eval(obj):
        if(counter<3):
            l.append(i['name'])
            counter=counter+1
        else:
            break
    return l
movies['cast']=movies['cast'].apply(getcast)
def getdirector(obj):
    l=[]
    for i in ast.literal_eval(obj):
        if i['job']=='Director':
             l.append(i['name'])
             break
    return l
movies['crew']=movies['crew'].apply(getdirector)
movies['overview']=movies['overview'].apply(lambda x:x.split())
movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])
movies['tags']=movies['overview']+movies['genres']+movies['cast']+movies['crew']
new=movies.drop(columns=['overview', 'genres','keywords', 'cast', 'crew'])
new['tags']=new['tags'].apply(lambda x: " ".join(x))
new['tags']=new['tags'].apply(lambda x: x.lower())
from sklearn.feature_extraction.text import CountVectorizer
cv= CountVectorizer(max_features=5000, stop_words='english')
vector=cv.fit_transform(new['tags']).toarray()
from sklearn.metrics.pairwise import cosine_similarity
import nltk
from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()
def stem(text):
  L=[]
  for i in text.split():
    L.append(ps.stem(i))
  return " ".join(L)
new['tags']=new['tags'].apply(stem)
similarity=cosine_similarity(vector)
def recommend (movie):
  index=new[new['title']==movie].index[0]
  distances = similarity[index]
  movielist=sorted(list(enumerate(distances)), reverse=True, key=lambda x:x[1])[1:6]
  for i in movielist:
    print(new.iloc[i[0]].title)
nameofmovie=input()
recommend(nameofmovie)
